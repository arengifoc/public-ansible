---
- hosts: localhost
  connection: local
  environment:
    TZ: America/Lima
  gather_facts: yes
  tasks:
    - name: Validacion de variables necesarias
      assert:
        that:
          - os_name is defined
          - aws_region is defined
          - aws_access_key is defined
          - aws_secret_key is defined
          - vm_size is defined
        fail_msg: Una o mas variables necesarias se encuentra ausente':' os_name, aws_region, aws_access_key, aws_secret_key, vm_size
        success_msg: Validacion de variables exitosa

    - name: Validar si se definio una clave valida para administrador
      when:
        custom_admin_pass is not defined or
        custom_admin_pass == "" or
        custom_admin_pass == None or
        custom_admin_pass | regex_search(' ')
      set_fact:
        nopass: yes

    - name: Crear clave aleatoria nueva para administrador
      when: nopass is defined
      command: openssl rand -base64 20
      delegate_to: localhost
      register: newpass_cmd

    - name: Guardar nueva clave en variable
      set_fact:
        new_admin_pass: "{{ newpass_cmd.stdout if nopass is defined else custom_admin_pass }}"

    - name: Incluir variable de AMIs
      include_vars: files/ami_mapping.yml

    - name: Filtrar AMI deseada
      set_fact:
        desired_ami: "{{ amis | selectattr('friendly_name','equalto', os_name) | first }}"

    - name: Buscar el AMI mas reciente
      ec2_ami_facts:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        owners: "{{ desired_ami.owners }}"
        region: "{{ aws_region }}"
        filters:
          root-device-type: "{{ desired_ami.root_device_type }}"
          name: "{{ desired_ami.name | default(omit) }}"
          product-code: "{{ desired_ami.product_code | default(omit) }}"
      register: ec2_ami_result

    - name: Definir variable para la AMI mas reciente
      set_fact:
        latest_ami: "{{ ec2_ami_result.images | sort(attribute='creation_date') | last }}"
    
    - name: Definir variables acorde a la AMI seleccionada
      set_fact:
        os_adminuser: "{{ desired_ami.ssh_user | default('ec2-user') }}"
        vm_name: "{{ desired_ami.short_name }}"
        vm_ami: "{{ latest_ami.image_id }}"

    - name: Formatear fecha y hora en variable
      set_fact:
        datetime: "{{ ansible_date_time.year }}-{{ ansible_date_time.month }}-{{ ansible_date_time.day }}_{{ ansible_date_time.hour }}-{{ ansible_date_time.minute }}"

    - name: Generar string aleatorio
      shell: date +%s | md5sum | awk '{ print $1 }' | tr '0123456789' 'olzEAsgTBa' | cut -c 1-12
      register: random_name

    - name: Definir nombre de job aleatorio 
      set_fact: 
        tmpjob: "{{ random_name.stdout }}"
   
    - name: Crear directorio de trabajo 
      file: 
        path: group_vars 
        state: directory
 
    - name: Crear inventario 
      template: 
        src: templates/inventory.ini.j2 
        dest: inventory-{{ tmpjob }}.ini 

    - name: Crear archivo JSON para packer 
      template: 
        src: templates/packer-config.json.j2
        dest: packer-config-{{ tmpjob }}.json

    - name: Crear playbook post instalacion
      copy: 
        src: templates/postinstall.yml
        dest: postinstall-{{ tmpjob }}.yml 
 
    - name: Crear archivo de variables 
      template: 
        src: templates/groupvars.j2 
        dest: group_vars/{{ tmpjob }}

    - name: Crear llave privada personalizada
      command: ssh-keygen -t rsa -f sshkey-{{ tmpjob }} -q -N ''
      when: not os_name | regex_search("windows", ignorecase=True)

    - debug:
        msg: "Puede ver el progreso con tail -f packer-{{ tmpjob }}.log"

    - name: Crear AMI de {{ os_name }} con Packer
      shell: packer build -var aws_region={{ aws_region }} -var vm_ami={{ vm_ami }} \
          -var vm_size={{ vm_size }} -var os_adminuser={{ os_adminuser }} \
          -var vm_name={{ vm_name }} -machine-readable packer-config-{{ tmpjob }}.json | tee packer-{{ tmpjob }}.log
      register: packer_output
      ignore_errors: yes
      environment:
        AWS_ACCESS_KEY_ID: "{{ aws_access_key }}"
        AWS_SECRET_ACCESS_KEY: "{{ aws_secret_key }}"

    - name: Error de ejecucion de packer (si aplica)
      debug:
        msg:
          - "{{ packer_output.cmd if packer_output.cmd is defined else script }} : {{ packer_output.msg }}"
          - "{{ packer_output.stdout_lines | default(omit) }}"
      when: packer_output.failed

    - name: Mostrar salida de error (stderr)
      debug:
        msg: "{{ packer_output.stderr_lines if packer_output.stderr_lines is defined and packer_output.stderr_lines != [] else 'No hubo salida de error' }}"

    - name: Mostrar salida estandar (stdout)
      debug:
        msg: "{{ packer_output.stdout_lines if packer_output.stdout_lines is defined and packer_output.stdout_lines != [] else 'No hubo salida estandar' }}"

    - name: Borrar archivos usados en la tarea 
      file:
        path: "{{ item }}"
        state: absent
      with_items:
        - group_vars/{{ tmpjob }}
        - inventory-{{ tmpjob }}.ini
        - packer-config-{{ tmpjob }}.json
        - packer-{{ tmpjob }}.log
        - postinstall-{{ tmpjob }}.yml
        - ipv4-{{ tmpjob }}.txt
        - sshkey-{{ tmpjob }} 
        - sshkey-{{ tmpjob }}.pub 
