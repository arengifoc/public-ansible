---
- hosts: localhost
  connection: local
  environment:
    TZ: America/Lima
  gather_facts: yes
  tasks:
    - name: Validacion de parametros de vCenter
      assert:
        that:
            - linux_cluster is defined
            - windows_cluster is defined
            - template_folder is defined
            - vm_datastore is defined
            - vm_folder is defined
            - vm_resourcepool is defined
            - vmware_host is defined
            - vmware_user is defined
            - vmware_password is defined
            - vsphere_datacenter is defined
        fail_msg: No se ha definido parametros de vCenter asociado a esta ejecucion
        success_msg: Validacion exitosa de variables necesarias

    - name: Validacion de parametros Operating System
      assert:
        that:
          - os_adminpass is defined
          - os_adminuser is defined
        fail_msg: No se ha definido parametros Operating System asociado a esta ejecucion
        success_msg: Validacion exitosa de variables necesarias

    - name: Validacion de variables necesarias como parametros
      assert:
        that:
            - os_name is defined
        fail_msg: " No se ha definido una o mas de las variables requeridas':' os_name"
        success_msg: Validacion exitosa de variables necesarias

    - name: Obtener ultimo template segun patron de VM {{ os_name }}
      command: ./files/list-templates.ps1 {{ vmware_host }} {{ vmware_user }} {{ vmware_password }} {{ os_name }}
      register: search_template

    - name: Definir template a usar con packer
      set_fact:
        vm_template: "{{ search_template.stdout }}"

    - name: Abortar si no se encontro template disponible
      when: vm_template == ""
      fail:
        msg: No se encontro templates para {{ os_name }}

    - name: Informar template encontrado
      debug:
        msg: Se encontro {{ vm_template }} como el template mas reciente de {{ os_name }}

    - name: Definir familia de SO
      set_fact:
        os: "{{ 'windows' if os_name | regex_search('win', ignorecase=True) else 'linux' }}"

    - name: Definir cluster VMware a usar
      set_fact:
        vm_cluster: "{{ windows_cluster if os == 'windows' else linux_cluster }}"

    - name: Formatear fecha y hora en variable
      set_fact:
        datetime: "{{ ansible_date_time.year }}-{{ ansible_date_time.month }}-{{ ansible_date_time.day }}_{{ ansible_date_time.hour }}-{{ ansible_date_time.minute }}"

    - name: Generar string aleatorio
      shell: date +%s | md5sum | awk '{ print $1 }' | tr '0123456789' '0lzeAsgtBa' | cut -c 1-12
      register: random_name

    - name: Definir nombre de job aleatorio
      set_fact:
        tmpjob: "{{ random_name.stdout }}"

    - name: Crear directorio de trabajo
      file:
        path: group_vars
        state: directory

    - name: Copiar playbook a directorio de trabajo
      copy:
        src: files/postinstall.yml
        dest: postinstall-{{ tmpjob }}.yml

    - name: Crear inventario
      template:
        src: templates/inventory.ini.j2
        dest: inventory-{{ tmpjob }}.ini

    - name: Crear archivo JSON para packer
      template:
        src: templates/packer-config.json.j2
        dest: packer-config-{{ tmpjob }}.json

    - name: Crear archivo de variables
      template:
        src: templates/groupvars.j2
        dest: group_vars/{{ tmpjob }}

    - debug:
        msg: "Puede ver el progreso con tail -f packer-{{ tmpjob }}.log"

    - name: Construir imagen con packer
      shell: packer build packer-config-{{ tmpjob }}.json | tee packer-{{ tmpjob }}.log
      register: packer_result

    - name: Salida del comando packer
      debug:
        msg: "{{ packer_result.stdout_lines }}"

    - name: Borrar archivos usados en la tarea
      file:
        path: "{{ item }}"
        state: absent
      with_items:
        - group_vars/{{ tmpjob }}
        - inventory-{{ tmpjob }}.ini
        - packer-config-{{ tmpjob }}.json
        - postinstall-{{ tmpjob }}.yml
        - packer-{{ tmpjob }}.log

