terraform {
  backend "s3" {
    bucket = "{{  terraform_bucket  }}"
    key    = "{{  terraform_key_client  }}/AWS/{{  ec2_name  }}/.terraform/terraform.tfstate"
    region = "us-east-1"
  }
}

provider "aws" {
  region = "{{  ec2_region  }}"
}

resource "aws_security_group" "ec2_security_group" {
  name = "sg_{{  ec2_name  }}_{{  ec2_ami  }}_{{  datetime  }}"
  vpc_id      = "{{  vpc_id  }}"

  {% if so_type == "Linux" %}
    ingress {
      cidr_blocks = ["0.0.0.0/0"]
      from_port = 22
      to_port = 22
      protocol = "tcp"
    }
  {% else %}
    ingress {
      cidr_blocks = ["0.0.0.0/0"]
      from_port = 3389
      to_port = 3389
      protocol = "tcp"
    }
    ingress {
      cidr_blocks = ["0.0.0.0/0"]
      from_port = 5986
      to_port = 5986
      protocol = "tcp"
    }
  {% endif%}

  {# {% if existPorts %}
    {% for port in ports %}
      ingress {
        cidr_blocks = ["0.0.0.0/0"]
        from_port = "{{  port.split(',')[0] }}"
        to_port = "{{ port.split(',')[1]  }}"
        protocol = "{{  port.split(',')[2]  }}"
      }
    {% endfor %}
  {% endif %} #}

  egress {
    from_port       = 0
    to_port         = 0
    protocol        = "-1"
    cidr_blocks     = ["0.0.0.0/0"]
  }
}

{% if existPorts %}
{% for port in ports %}
resource "aws_security_group_rule" "{{ port.split(',')[2]  }}_{{  port.split(',')[0] }}_{{ port.split(',')[1]  }}" {
  type            = "ingress"
  from_port       = "{{  port.split(',')[0] }}"
  to_port         = "{{ port.split(',')[1]  }}"
  protocol        = "{{  port.split(',')[2]  }}"
  cidr_blocks = ["0.0.0.0/0"]

  security_group_id = aws_security_group.ec2_security_group.id
}
{% endfor %}
{% endif %}

resource "aws_instance" "ec2" {
  ami = "{{ ec2_ami }}"
  instance_type = "{{ ec2_instance_type }}"

  {% if so_type == "Linux" %}
    key_name = "key_temp_{{  var_job  }}"
  {% else %}
  ebs_block_device{
    device_name = "/dev/sdg"
    delete_on_termination = "false"
    volume_type = "standard"
    volume_size = "5"
  }
  {% endif%}

  tags = {
    Name = "{{ ec2_name }}"
  }

  subnet_id = "{{  subnet_id  }}"
  security_groups = [aws_security_group.ec2_security_group.id]
  monitoring = "{{ ec2_monitoring }}"


  {% if existEBS %}
    {% for item in ebs %}
      ebs_block_device{
        device_name = "{{  item.split(',')[0]  }}"
        delete_on_termination = "{{  item.split(',')[1]  }}"
        volume_type = "{{  item.split(',')[2]  }}"
        volume_size = "{{  item.split(',')[3]  }}"
      }
    {% endfor %}
  {% endif %}
}

output "instance_ip" {
  value = aws_instance.ec2.public_dns
}
